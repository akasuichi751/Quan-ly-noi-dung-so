const express = require('express');
const router = express.Router();
const db = require('../db'); // Gi·ªØ nguy√™n k·∫øt n·ªëi v·ªõi MySQL
const bcrypt = require('bcryptjs');
const nodemailer = require("nodemailer");
const crypto = require("crypto");

// C·∫•u h√¨nh g·ª≠i email
const transporter = nodemailer.createTransport({
    host: process.env.EMAIL_HOST,
    port: process.env.EMAIL_PORT,
    secure: false, // true for 465, false for other ports
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
    }
});

// Bi·ªÉu th·ª©c ch√≠nh quy ki·ªÉm tra email h·ª£p l·ªá
const emailRegex = /^[a-zA-Z0-9._%+-]+@gmail\.com$/;

// ‚úÖ Hi·ªÉn th·ªã trang qu√™n m·∫≠t kh·∫©u
router.get("/forgot-password", (req, res) => {
    res.render("forgot-password", { error: null, success: null });
});

// ‚úÖ X·ª≠ l√Ω g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
router.post("/forgot-password", async (req, res) => {  // Ch√∫ √Ω async ·ªü ƒë√¢y
    const email = req.body.email.trim();
    if (!email) {
        return res.render("forgot-password", { error: "Vui l√≤ng nh·∫≠p email!", success: null });
    }

    try {
        const [results] = await db.query("SELECT id FROM users WHERE email = ?", [email]);
        if (results.length === 0) {
            return res.render("forgot-password", { error: "Email kh√¥ng t·ªìn t·∫°i!", success: null });
        }

        const userId = results[0].id;
        const token = crypto.randomBytes(20).toString("hex");
        const expires = new Date(Date.now() + 3600000); // 1 gi·ªù

        await db.query("UPDATE users SET reset_token = ?, reset_expires = ? WHERE id = ?", [token, expires, userId]);

        // G·ª≠i email
        const resetLink = `${process.env.BASE_URL}/reset-password/${token}`;
        await transporter.sendMail({
            from: `"Support" <${process.env.EMAIL_USER}>`,
            to: email,
            subject: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u",
            html: `<p>Nh·∫•n v√†o link d∆∞·ªõi ƒë√¢y ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</p>
                   <a href="${resetLink}">${resetLink}</a>
                   <p>Link n√†y c√≥ hi·ªáu l·ª±c trong 1 gi·ªù.</p>`
        });

        res.render("forgot-password", { error: null, success: "Email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i!" });
    } catch (error) {
        console.error("L·ªói h·ªá th·ªëng:", error);
        res.render("forgot-password", { error: "L·ªói h·ªá th·ªëng!", success: null });
    }
});

// ‚úÖ Hi·ªÉn th·ªã trang ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
router.get("/reset-password/:token", (req, res) => {
    const { token } = req.params;

    db.query("SELECT id FROM users WHERE reset_token = ? AND reset_expires > NOW()", [token], (err, results) => {
        if (err || results.length === 0) {
            return res.send("Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!");
        }
        res.render("reset-password", { token, error: null });
    });
});

// ‚úÖ X·ª≠ l√Ω ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
router.post("/reset-password/:token", async (req, res) => {
    const { token } = req.params;
    const { new_password, confirm_password } = req.body;

    if (new_password !== confirm_password) {
        return res.render("reset-password", { token, error: "M·∫≠t kh·∫©u kh√¥ng kh·ªõp!" });
    }

    try {
        const [results] = await db.query("SELECT id FROM users WHERE reset_token = ? AND reset_expires > NOW()", [token]);
        if (results.length === 0) {
            return res.send("Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!");
        }

        const userId = results[0].id;
        const hashedPassword = await bcrypt.hash(new_password, 10);

        await db.query("UPDATE users SET password = ?, reset_token = NULL, reset_expires = NULL WHERE id = ?", [hashedPassword, userId]);

        res.redirect("/login");
    } catch (error) {
        console.error("L·ªói h·ªá th·ªëng khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error);
        res.send("L·ªói h·ªá th·ªëng!");
    }
});

// ‚úÖ X·ª≠ l√Ω ƒëƒÉng xu·∫•t
router.get('/logout', (req, res) => {
    req.session.destroy();
    res.redirect('/login');
});

// ‚úÖ Hi·ªÉn th·ªã trang ƒëƒÉng k√Ω
router.get('/register', (req, res) => {
    res.render('register', { error: null, success: null });
});

// ‚úÖ X·ª≠ l√Ω ƒëƒÉng k√Ω t√†i kho·∫£n
router.post('/register', async (req, res) => {
    const { username, password, confirm_password, email, role } = req.body;

    try {
        const trimmedUsername = username.trim();
        const trimmedEmail = email.trim();

        // Ki·ªÉm tra t√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i
        const [existingUser] = await db.query('SELECT * FROM users WHERE username = ?', [trimmedUsername]);

        if (existingUser.length > 0) {
            return res.render('register', { error: '‚ùå T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i!', success: null });
        }

        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
        const [existingEmail] = await db.query('SELECT * FROM users WHERE email = ?', [trimmedEmail]);
        if (existingEmail.length > 0) {
            return res.render('register', { error: '‚ùå Email ƒë√£ t·ªìn t·∫°i!', success: null });
        }

        // Ki·ªÉm tra email h·ª£p l·ªá
        const emailRegex = /^[a-zA-Z0-9._%+-]+@gmail\.com$/;
        if (!emailRegex.test(trimmedEmail)) {
            return res.render('register', { error: '‚ùå Email ph·∫£i l√† Gmail h·ª£p l·ªá!', success: null });
        }

        // Ki·ªÉm tra m·∫≠t kh·∫©u
        if (password !== confirm_password) {
            return res.render('register', { error: '‚ùå M·∫≠t kh·∫©u v√† m·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!', success: null });
        }

        // M√£ h√≥a m·∫≠t kh·∫©u
        const hashedPassword = await bcrypt.hash(password, 10);

        // L∆∞u th√¥ng tin v√†o c∆° s·ªü d·ªØ li·ªáu
        await db.query('INSERT INTO users (username, password, email, role) VALUES (?, ?, ?, ?)', 
            [trimmedUsername, hashedPassword, trimmedEmail, role]);

        return res.render('register', { error: null, success: 'üéâ ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.' });

    } catch (error) {
        console.error('L·ªói khi ƒëƒÉng k√Ω:', error);
        return res.render('register', { error: '‚ùå L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i!', success: null });
    }
});

module.exports = router;
